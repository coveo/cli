const axios = require('axios');
const yargs = require('yargs/yargs');
const moment = require('moment');
const {hideBin} = require('yargs/helpers');
const {homedir} = require('os');
const {join} = require('path');
const {config} = require('dotenv');
config({path: join(homedir(), '.env')});

// TODO: CDX-98: URL should vary in function of the target environment.
const platformHost = 'https://platformdev.cloud.coveo.com/rest/';

function wasCreatedByTheCli(testRunId = '') {
  return (key) =>
    key.displayName?.startsWith(`cli-${testRunId}`) &&
    key.description === 'Generated by the Coveo CLI';
}

function wasCreatedBefore(amount, unit) {
  return (key) => {
    const limit = moment().subtract(amount, unit);
    return moment(key.createdDate).isBefore(limit);
  };
}

function authHeader(accessToken) {
  return {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  };
}

async function getAllApiKeys(orgId, accessToken) {
  const apiKeysUrl = `${platformHost}organizations/${orgId}/apikeys`;
  const response = await axios.get(apiKeysUrl, authHeader(accessToken));
  return response.data;
}

async function deleteApiKeys(orgId, accessToken, apiKeysToDelete) {
  for (let i = 0; i < apiKeysToDelete.length; i++) {
    const apiKey = apiKeysToDelete[i];
    const apiKeyUrl = `${platformHost}organizations/${orgId}/apikeys/${apiKey.id}`;
    console.log(`Deleting ${apiKey.displayName}`);
    await axios.delete(apiKeyUrl, authHeader(accessToken));
  }
  console.log(`\nDeleted ${apiKeysToDelete.length} API keys`);
}

function parseDuration(input) {
  const durationRegex = /(\d+)([a-zA-Z]+)/;
  const match = durationRegex.exec(input);
  if (match) {
    return [match[1], match[2]];
  }
  throw new Error(
    'Invalid input. Should follow the format <Amount:number><Unit:unitOfTime>. For more info on duration, visit https://momentjs.com/docs/#/durations/creating/'
  );
}

async function main(amount, unit) {
  const testOrgId = process.env.TEST_ORG_ID;
  const accessToken = process.env.ACCESS_TOKEN;
  const testRunId = process.env.TEST_RUN_ID;
  const apiKeys = await getAllApiKeys(testOrgId, accessToken);

  const cliApiKeys = apiKeys
    .filter(wasCreatedByTheCli(testRunId))
    .filter(wasCreatedBefore(amount, unit));

  await deleteApiKeys(testOrgId, accessToken, cliApiKeys);
}

const argv = yargs(hideBin(process.argv))
  .usage('Usage: $0 [options]')
  .describe('olderThan', 'Delete API keys created before the specified date')
  .alias('olderThan', ['o'])
  .default('olderThan', '0s')
  .coerce('olderThan', (arg) => {
    const [amount, unit] = parseDuration(arg);
    return {amount, unit};
  })
  .example('$0 --olderThan 1d', 'Delete API keys created before yesterday')
  .help('h')
  .alias('h', 'help').argv;

const {amount, unit} = argv.olderThan;
main(amount, unit);
