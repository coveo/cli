diff --git a/node_modules/@oclif/dev-cli/lib/commands/pack/deb.js b/node_modules/@oclif/dev-cli/lib/commands/pack/deb.js
index 885416e..deb28c3 100644
--- a/node_modules/@oclif/dev-cli/lib/commands/pack/deb.js
+++ b/node_modules/@oclif/dev-cli/lib/commands/pack/deb.js
@@ -73,8 +73,8 @@ class PackDeb extends command_1.Command {
             await qq.write([workspace, 'DEBIAN/control'], scripts.control(buildConfig, debArch(arch)));
             await qq.chmod([workspace, 'usr/lib', config.dirname, 'bin', config.bin], 0o755);
             await qq.x(`ln -s "../lib/${config.dirname}/bin/${config.bin}" "${workspace}/usr/bin/${config.bin}"`);
-            await qq.x(`chown -R root "${workspace}"`);
-            await qq.x(`chgrp -R root "${workspace}"`);
+            await qq.x(`sudo chown -R root "${workspace}"`);
+            await qq.x(`sudo chgrp -R root "${workspace}"`);
             await qq.x(`dpkg --build "${workspace}" "${qq.join(dist, `${versionedDebBase}.deb`)}"`);
         };
         const arches = _.uniq(buildConfig.targets
diff --git a/node_modules/@oclif/dev-cli/lib/commands/pack/index.js b/node_modules/@oclif/dev-cli/lib/commands/pack/index.js
index 52f83a2..5fca491 100644
--- a/node_modules/@oclif/dev-cli/lib/commands/pack/index.js
+++ b/node_modules/@oclif/dev-cli/lib/commands/pack/index.js
@@ -6,8 +6,6 @@ const Tarballs = require("../../tarballs");
 class Pack extends command_1.Command {
     async run() {
         const prevCwd = qq.cwd();
-        if (process.platform === 'win32')
-            throw new Error('pack does not function on windows');
         const { flags } = this.parse(Pack);
         const targets = flags.targets ? flags.targets.split(',') : undefined;
         const buildConfig = await Tarballs.buildConfig(flags.root, { xz: flags.xz, targets });
diff --git a/node_modules/@oclif/dev-cli/lib/commands/pack/win.js b/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
index a313991..382d603 100644
--- a/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
+++ b/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const command_1 = require("@oclif/command");
 const qq = require("qqjs");
+const path = require("path");
 const Tarballs = require("../../tarballs");
 const scripts = {
     /* eslint-disable no-useless-escape */
@@ -206,9 +207,14 @@ class PackWin extends command_1.Command {
             await qq.write([installerBase, `${config.bin}.nsi`], scripts.nsis(config, arch));
             // eslint-disable-next-line no-await-in-loop
             await qq.mv(buildConfig.workspace({ platform: 'win32', arch }), [installerBase, 'client']);
-            // eslint-disable-next-line no-await-in-loop
-            await qq.x(`makensis ${installerBase}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`);
-            const o = buildConfig.dist(`win/${config.bin}-v${buildConfig.version}-${arch}.exe`);
+            if(process.platform === 'win32') {
+              // eslint-disable-next-line no-await-in-loop
+              await qq.x(`makensis ${path.join(installerBase,config.bin)}.nsi`);
+            } else {
+              // eslint-disable-next-line no-await-in-loop
+              await qq.x(`makensis ${installerBase}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`);
+            }
+            const o = buildConfig.dist(`win/${config.bin}-v${buildConfig.version}-${arch}.exe`)
             // eslint-disable-next-line no-await-in-loop
             await qq.mv([installerBase, 'installer.exe'], o);
             this.log(`built ${o}`);
diff --git a/node_modules/@oclif/dev-cli/lib/tarballs/build.js b/node_modules/@oclif/dev-cli/lib/tarballs/build.js
index c6bd245..d4e42af 100644
--- a/node_modules/@oclif/dev-cli/lib/tarballs/build.js
+++ b/node_modules/@oclif/dev-cli/lib/tarballs/build.js
@@ -47,16 +47,16 @@ async function build(c, options = {}) {
     };
     const addDependencies = async () => {
         qq.cd(c.workspace());
-        const yarnRoot = findYarnWorkspaceRoot(c.root) || c.root;
-        const yarn = await qq.exists([yarnRoot, 'yarn.lock']);
+        const workspaceRoot = findYarnWorkspaceRoot(c.root) || c.root;
+        const yarn = await qq.exists([workspaceRoot, 'yarn.lock']);
         if (yarn) {
-            await qq.cp([yarnRoot, 'yarn.lock'], '.');
+            await qq.cp([workspaceRoot, 'yarn.lock'], '.');
             await qq.x('yarn --no-progress --production --non-interactive');
         }
         else {
-            let lockpath = qq.join(c.root, 'package-lock.json');
+            let lockpath = qq.join(workspaceRoot, 'package-lock.json');
             if (!await qq.exists(lockpath)) {
-                lockpath = qq.join(c.root, 'npm-shrinkwrap.json');
+                lockpath = qq.join(workspaceRoot, 'npm-shrinkwrap.json');
             }
             await qq.cp(lockpath, '.');
             await qq.x('npm install --production');
diff --git a/node_modules/@oclif/dev-cli/lib/tarballs/node.js b/node_modules/@oclif/dev-cli/lib/tarballs/node.js
index fabe5c4..83d286a 100644
--- a/node_modules/@oclif/dev-cli/lib/tarballs/node.js
+++ b/node_modules/@oclif/dev-cli/lib/tarballs/node.js
@@ -1,9 +1,22 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const errors_1 = require("@oclif/errors");
+const { ReadStream } = require("fs");
 const path = require("path");
 const qq = require("qqjs");
 const log_1 = require("../log");
+
+async function checkFileSum(fileBasedir,filePath,sumFilePath) {
+    if(process.platform === 'win32') {
+        const computedSum = (await qq.x(`certUtil -hashfile ${filePath} SHA256`, {cwd: fileBasedir, stdio:'pipe'})).stdout.split('\n')[1].trim();
+        const checkSum = (await qq.x(`findstr ${path.basename(filePath)} ${sumFilePath}`,{cwd: fileBasedir, stdio:'pipe'})).stdout.split(' ')[0].trim();
+        if(computedSum !==checkSum) {
+            throw new Error(`${filePath} checksum fail!`)
+        }
+    } else {
+        await qq.x(`grep ${path.basename(filePath)} ${sumFilePath} | shasum -a 256 -c -`, {cwd: fileBasedir})
+    }
+}
 async function checkFor7Zip() {
     try {
         await qq.x('7z', { stdio: [0, null, 2] });
@@ -41,7 +54,7 @@ async function fetchNodeBinary({ nodeVersion, output, platform, arch, tmp }) {
         const basedir = path.dirname(tarball);
         await qq.mkdirp(basedir);
         await qq.download(url, tarball);
-        await qq.x(`grep ${path.basename(tarball)} ${shasums} | shasum -a 256 -c -`, { cwd: basedir });
+        await checkFileSum(basedir, tarball, shasums)
     };
     const extract = async () => {
         log_1.log(`extracting ${nodeBase}`);
@@ -51,7 +64,7 @@ async function fetchNodeBinary({ nodeVersion, output, platform, arch, tmp }) {
         await qq.mkdirp(path.dirname(cache));
         if (platform === 'win32') {
             qq.pushd(nodeTmp);
-            await qq.x(`7z x -bd -y ${tarball} > /dev/null`);
+            await qq.x(`7z x -bd -y ${tarball} > ${process.platform=== 'win32' ? 'NUL' : '/dev/null'}`);
             await qq.mv([nodeBase, 'node.exe'], cache);
             qq.popd();
         }
