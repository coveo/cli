diff --git a/node_modules/oclif/lib/tarballs/build.js b/node_modules/oclif/lib/tarballs/build.js
index 6dc6c06..14dc008 100644
--- a/node_modules/oclif/lib/tarballs/build.js
+++ b/node_modules/oclif/lib/tarballs/build.js
@@ -11,6 +11,7 @@ const upload_util_1 = require("../upload-util");
 const util_1 = require("../util");
 const child_process_1 = require("child_process");
 const node_util_1 = require("node:util");
+const Arborist = require('@npmcli/arborist');
 const exec = (0, node_util_1.promisify)(child_process_1.exec);
 const pack = async (from, to) => {
     const cwd = path.dirname(from);
@@ -49,16 +50,26 @@ async function build(c, options = {}) {
         await fs.writeJSON(pjsonPath, pjson, { spaces: 2 });
     };
     const addDependencies = async () => {
-        const yarnRoot = findYarnWorkspaceRoot(c.root) || c.root;
-        if (fs.existsSync(path.join(yarnRoot, 'yarn.lock'))) {
-            await fs.copy(path.join(yarnRoot, 'yarn.lock'), path.join(c.workspace(), 'yarn.lock'));
+        const workspaceRoot = findYarnWorkspaceRoot(c.root) || c.root;
+        if (fs.existsSync(path.join(workspaceRoot, 'yarn.lock'))) {
+            await fs.copy(path.join(workspaceRoot, 'yarn.lock'), path.join(c.workspace(), 'yarn.lock'));
             await exec('yarn --no-progress --production --non-interactive', { cwd: c.workspace() });
         }
         else {
-            const lockpath = fs.existsSync(path.join(c.root, 'package-lock.json')) ?
-                path.join(c.root, 'package-lock.json') :
-                path.join(c.root, 'npm-shrinkwrap.json');
+            const lockpath = fs.existsSync(path.join(workspaceRoot, 'package-lock.json')) ?
+                path.join(workspaceRoot, 'package-lock.json') :
+                path.join(workspaceRoot, 'npm-shrinkwrap.json');
             await fs.copy(lockpath, path.join(c.workspace(), path.basename(lockpath)));
+            const arb = new Arborist();
+            await arb.loadVirtual();
+            await arb.buildIdealTree({
+              update: {
+                names: Array.from(arb.virtualTree.fsChildren)
+                  .filter((node) => !node.dev && node !== arb.virtualTree.root)
+                  .map((node) => node.packageName),
+              }
+            });
+            await arb.reify();
             await exec('npm install --production', { cwd: c.workspace() });
         }
     };
