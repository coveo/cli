name: Daily test
on:
  schedule:
    - cron: '0 0 * * *'

env:
  E2E_USE_NPM_REGISTRY: true

jobs:
  e2e-setup-login:
    name: End-to-end login
    runs-on: 'ubuntu-latest'
    outputs:
      cliConfigJson: ${{ steps.setup.outputs.cliConfigJson}}
    env:
      # Platform environment to log into for the e2e tests.
      PLATFORM_ENV: 'qa'
      # Username used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_NAME: ${{ secrets.PLATFORM_USER_NAME }}
      # Password used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_PASSWORD: ${{ secrets.PLATFORM_USER_PASSWORD }}
      # API key to delete all the API keys created by the e2e tests
      PLATFORM_API_KEY: ${{ secrets.PLATFORM_API_KEY }}
      # ID of the organization to log into for the e2e tests
      ORG_ID: ${{ secrets.ORG_ID }}
      # ID of the test run to identify resources to teardown.
      TEST_RUN_ID: 'id${{ matrix.os }}-${{ github.sha }}-${{ github.run_attempt }}-dailyg'
    steps:
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # tag=v3
        with:
          # pulls all commits (needed for computing the next version)
          fetch-depth: 0
      - name: Checkout last tag
        run: git checkout $(git describe --abbrev=0 --tags)
      - uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # tag=v3
        with:
          node-version: ${{matrix.node}}
          cache: 'npm'
      - name: Install locked NPM version.
        # TODO: Remove later, when `npm 8.5.4` is built in.
        run: npm i -g npm@^8.5.4
      - name: Install Coveo CLI
        run: npm i -g @coveo/cli@latest
      - run: |
          npm ci
          Xvfb :1 -screen 0 1024x768x16 & sleep 1
          xdg-settings set default-web-browser google-chrome.desktop
      - name: Build
        run: npm run build
      - name: Setup E2E tests
        env:
          DISPLAY: ':1'
        run: node -r ts-node/register/transpile-only packages/cli-e2e/setup/ci-login.ts
      - name: Encode & Output config
        id: setup
        run: |
          echo "${{ secrets.E2E_TOKEN_PASSPHRASE }}" | gpg -a --batch --passphrase-fd 0 --symmetric --cipher-algo AES256 --output encodedConfig $CLI_CONFIG_PATH
          echo "::set-output name=cliConfigJson::$(base64 -w 0 encodedConfig)"
  e2e:
    name: End-to-end tests
    runs-on: ${{matrix.os}}
    needs: [e2e-setup-login]
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: [16]
        spec:
          [
            'angular.specs.ts',
            'atomic.specs.ts',
            'auth.specs.ci.ts',
            'orgList.specs.ts',
            'orgResources.specs.ts',
            'react.specs.ts',
            'vue.specs.ts',
          ]
    env:
      # Platform environment to log into for the e2e tests.
      PLATFORM_ENV: 'qa'
      # Username used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_NAME: ${{ secrets.PLATFORM_USER_NAME }}
      # Password used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_PASSWORD: ${{ secrets.PLATFORM_USER_PASSWORD }}
      # API key to delete all the API keys created by the e2e tests
      PLATFORM_API_KEY: ${{ secrets.PLATFORM_API_KEY }}
      # ID of the organization to log into for the e2e tests
      ORG_ID: ${{ secrets.ORG_ID }}
      # ID of the test run to identify resources to teardown.
      TEST_RUN_ID: 'id${{ matrix.os }}-${{ github.sha }}-${{ github.run_attempt }}-dailyg'
      COVEO_DISABLE_AUTOUPDATE: true
      CLI_CONFIG_JSON: ${{needs.e2e-setup-login.outputs.cliConfigJson}}
    steps:
      - name: Setup runner
        if: ${{matrix.os == 'ubuntu-latest'}}
        # Ensure we can use as many file watcher as we want. see https://github.com/facebook/create-react-app/blob/master/docusaurus/docs/troubleshooting.md#npm-start-fail-due-to-watch-error
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - name: Setup runner
        if: ${{matrix.os == 'windows-latest'}}
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # tag=v3
        with:
          # pulls all commits (needed for computing the next version)
          fetch-depth: 0
      # pulls all tags (needed for computing the next version)
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Checkout last tag
        run: git checkout $(git describe --abbrev=0)
      - uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # tag=v3
        with:
          node-version: ${{matrix.node}}
          cache: 'npm'
      - uses: actions/setup-python@0ebf233433c08fb9061af664d501c3f3ff0e9e20 # tag=v3
        with:
          cache: 'pip'
      - name: Install Mitmproxy through pip
        run: pip install -r packages/cli-e2e/mitmproxy/requirements.txt
      - name: Install locked NPM version.
        # TODO: Remove later, when `npm 8.5.4` is built in.
        run: npm i -g npm@^8.5.4
      - name: Install Coveo CLI
        run: npm i -g @coveo/cli@latest
      - name: Decrypt config
        working-directory: packages/cli-e2e
        run: echo ${{needs.e2e-setup-login.outputs.cliConfigJson}} | base64 --decode | gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.E2E_TOKEN_PASSPHRASE }}" --output decrypted
      - run: npm ci
      - name: End-to-end Setup
        if: ${{matrix.os == 'ubuntu-latest'}}
        run: bash packages/cli-e2e/entrypoints/ci.sh
      - name: End-to-end Setup
        if: ${{matrix.os == 'windows-latest'}}
        run: packages/cli-e2e/entrypoints/ci.ps1
      - name: Tests
        if: ${{matrix.os == 'windows-latest'}}
        working-directory: packages/cli-e2e
        run: npm run jest:ci -- ${{matrix.spec}}
      - name: Tests
        if: ${{matrix.os == 'ubuntu-latest'}}
        env:
          DISPLAY: ':1'
        working-directory: packages/cli-e2e
        run: npm run jest:ci -- ${{matrix.spec}}
      - uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # tag=v3
        if: always()
        with:
          name: ${{matrix.os}}-${{matrix.spec}}-test-artifacts
          path: ./packages/cli-e2e/artifacts
  e2e-teardown:
    name: End-to-end teardown
    if: ${{ always() }}
    needs: [e2e, e2e-setup-login]
    runs-on: ubuntu-latest
    env:
      # Platform environment to log into for the e2e tests.
      PLATFORM_ENV: 'qa'
      # Username used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_NAME: ${{ secrets.PLATFORM_USER_NAME }}
      # Password used to log into the organization whose ID is stored in the ORG_ID variable
      PLATFORM_USER_PASSWORD: ${{ secrets.PLATFORM_USER_PASSWORD }}
      # API key to delete all the API keys created by the e2e tests
      PLATFORM_API_KEY: ${{ secrets.PLATFORM_API_KEY }}
      # ID of the organization to log into for the e2e tests
      ORG_ID: ${{ secrets.ORG_ID }}
      # ID of the test run to identify resources to teardown.
      TEST_RUN_ID: '${{ github.sha }}-${{ github.run_attempt }}-dailyg'
      CLI_CONFIG_JSON: ${{needs.e2e-setup-login.outputs.cliConfigJson}}
    steps:
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # tag=v3
        with:
          # pulls all commits (needed for computing the next version)
          fetch-depth: 0
      # pulls all tags (needed for computing the next version)
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Checkout last tag
        run: git checkout $(git describe --abbrev=0)
      - uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # tag=v3
        with:
          node-version: ${{matrix.node}}
          cache: 'npm'
      - name: Install locked NPM version.
        # TODO: Remove later, when `npm 8.5.4` is built in.
        run: npm i -g npm@^8.5.4
      - run: npm ci
      - name: Decrypt config
        run: echo ${{needs.e2e-setup-login.outputs.cliConfigJson}} | base64 --decode | gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.E2E_TOKEN_PASSPHRASE }}" --output decrypted
      - name: Delete test org
        env:
          DISPLAY: ':1'
        if: always()
        run: |
          Xvfb :1 -screen 0 1024x768x16 & sleep 1
          xdg-settings set default-web-browser google-chrome.desktop
          node -r ts-node/register/transpile-only packages/cli-e2e/cleaning.ts
          node ./scripts/cleaning/delete-orgs.js
      - name: Delete test API key
        if: always()
        run: node ./scripts/cleaning/delete-api-keys.js
  e2e-report:
    name: End-to-end status reporter
    if: ${{ always() }}
    needs: e2e
    runs-on: ubuntu-latest
    environment: Daily Tests
    steps:
      - name: Check e2e matrix status
        if: ${{ needs.e2e.result != 'success' }}
        run: curl --request POST --url ${{ secrets.SLACK_WEBHOOK }}
