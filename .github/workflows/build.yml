name: Signing test

# on:
#   release:
#     types: [published]
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'The version where to upload the binaries'
#         required: true

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  package:
    # environment: 'Release' TODO: move MACOS secrets to the right environment
    env:
      GITHUB_CREDENTIALS: ${{ secrets.GITHUB_TOKEN }}
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
      MACOS_APP_USERNAME: ${{ secrets.MACOS_APP_USERNAME }}
      MACOS_APP_SPECIFIC_PWD: ${{ secrets.MACOS_APP_SPECIFIC_PWD }}
      MACOS_WWDR_TEAM_ID: ${{ secrets.MACOS_WWDR_TEAM_ID }}
    name: Package for ${{ matrix.for }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            pack-command: ' macos'
            for: 'macos install kit'
          # - os: windows-latest
          #   pack-command: ' win'
          #   for: 'windows install kit'
          # - os: ubuntu-latest
          #   pack-command: ' deb'
          #   for: 'linux install kit'

    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
      - uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93 # tag=v3
        with:
          node-version: '16'
      - name: Setup Temporary Keychain
        if: ${{matrix.os == 'macos-latest'}}
        run: |
          # TODO: put in script file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          echo "Creating temporary keychain"
          security create-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PWD" build.keychain

          echo "Adding certificate to keychain"
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign -T /usr/bin/productsign

          echo "Enabling codesigning from a non user interactive shell"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_PWD" build.keychain
      # - name: Setup
      #   run: npm i
      # - name: Get tag
      #   run: node ./scripts/get-tag.js # ToDo (PRE_NX): replace by some jq magic
      # - name: Get commit short hash
      #   run: node ./scripts/get-commit-short-hash.mjs
      # - name: Build
      #   run: npm run build
      # - name: Create install kits
      #   working-directory: ./packages/cli/core
      #   run: ../../../node_modules/oclif/bin/run pack${{ matrix.pack-command }}
      # - name: Create packages
      #   working-directory: ./packages/cli/core
      #   if: ${{matrix.os == 'ubuntu-latest'}}
      #   run: ../../../node_modules/oclif/bin/run pack tarballs
      # - name: Sign Executable (Windows)
      #   working-directory: ./packages/cli/core
      #   if: ${{matrix.os == 'windows-latest'}}
      #   run: |
      #     New-Item -Force -ItemType directory -Path tmp
      #     echo "${{ secrets.COVEO_PFX }}" > ./tmp/cert.txt
      #     certutil -decode ./tmp/cert.txt ./tmp/cert.pfx
      #     Start-Process -FilePath "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" -ArgumentList "sign /f ./tmp/cert.pfx /p ${{ secrets.COVEO_PFX_PWD }} /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 ./dist/win32/coveo-${{env.tag}}-${{env.commitSHA1}}-x64.exe" -PassThru | Wait-Process
      #     Start-Process -FilePath "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" -ArgumentList "sign /f ./tmp/cert.pfx /p ${{ secrets.COVEO_PFX_PWD }} /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 ./dist/win32/coveo-${{env.tag}}-${{env.commitSHA1}}-x86.exe" -PassThru | Wait-Process
      - name: Sign Executable (macOS)
        # TODO: run for both mac os architectures
        # working-directory: ./packages/cli/core/dist/macos
        working-directory: ./packages/cli/core
        if: ${{matrix.os == 'macos-latest'}}
        run: |
          ls
          productsign --sign "Developer ID Installer: Coveo Solutions Inc." coveo-v1.35.12-10dd82a-x64.pkg coveo-v1.35.12-10dd82a-x64-signed.pkg
          // TODO: delete unsigned package
          // TODO: rename signed package
      - name: Notarize Executable (macOS)
        working-directory: ./packages/cli/core
        # working-directory: ./packages/cli/core/dist/macos
        if: ${{matrix.os == 'macos-latest'}}
        run: |
          # TODO: put in script file
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_APP_USERNAME" --team-id "$MACOS_WWDR_TEAM_ID" --password "$MACOS_APP_SPECIFIC_PWD"

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "coveo-v1.35.12-10dd82a-x64-signed.pkg" "notarization.zip"

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          echo "Attach staple"
          xcrun stapler staple "coveo-v1.35.12-10dd82a-x64-signed.pkg"
      - name: Upload artifacts
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3
        if: always()
        with:
          name: signed-pkg
          path: ./packages/cli/artifacts
