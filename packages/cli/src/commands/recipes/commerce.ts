import {bold} from 'chalk';
import {CliUx, Command} from '@oclif/core';
import {Trackable} from '../../lib/decorators/preconditions/trackable';
import SnapshotTemplate from '../../lib/recipes/commerce/snapshot-template.json';
import CatalogCreate from '../commerce/catalog/create';
import {
  HasNecessaryCoveoPrivileges,
  IsAuthenticated,
  Preconditions,
} from '../../lib/decorators/preconditions';
import {ensureDirSync, writeJsonSync} from 'fs-extra';
import SourceCatalogAdd from '../source/catalog/add';
import Push from '../org/resources/push';
// import Atomic from '../ui/create/atomic';
import {join} from 'path';
import {Project} from '../../lib/project/project';
import {cwd} from 'process';
import {rmSync} from 'fs';
import {AuthenticatedClient} from '../../lib/platform/authenticatedClient';
import {IntervalUnit} from '@coveord/platform-client';
import {selectField} from '../../lib/catalog/questions';
import {getDocumentFieldsAndObjectTypeValues} from '../../lib/catalog/parse';
import {newTask, stopCurrentTask} from '../../lib/utils/spinner';

type CommandRunReturn<T extends typeof Command> = Promise<
  ReturnType<InstanceType<T>['run']>
>;

export default class CommerceRecipe extends Command {
  private static tempFolder = join(cwd(), '.coveo-recipe');
  public static description = `${bold.bgYellow(
    '(alpha)'
  )} Create a commerce catalog interactively along with necessary sources`;

  public static flags = {
    ...CatalogCreate.flags,
  };

  public static args = [...CatalogCreate.args];

  @Trackable()
  @Preconditions(
    IsAuthenticated(),
    HasNecessaryCoveoPrivileges()
    //   TODO:
  )
  public async run() {
    const {flags, args} = await this.parse(CommerceRecipe);
    this.ensureTempFolder();
    // TODO: Create a pre-run hook to store variables that will be use across recipe steps
    const fieldNames = await this.getFieldNames(); // Doing this at the very beginning since we list the missing fields only. TODO: should also list existing fields in org (in case the org is not blank)
    const {sourceId, product} = await this.newStep(
      'Catalog creation',
      CatalogCreate,
      [
        args.name,
        '--json',
        '--sourceVisibility',
        flags.sourceVisibility,
        '--dataFiles',
        ...flags.dataFiles,
      ]
    );
    this.storeParametrizedSnapshotLocally(product.objectType, args.name); // Maybe have multiple snapshots. each one with a specific config (eg. with product grouping feature)
    await this.newStep('Organization setup', Push, [
      '--sync',
      '--skipPreview',
      '--projectPath',
      CommerceRecipe.tempFolder,
      '--wait',
      '600',
    ]);
    await this.additionalCommerceFeatures(fieldNames); // TODO: rework the order since the snapshot should be applied after all additional features are selected
    await this.newStep('Indexation', SourceCatalogAdd, [
      sourceId,
      '--createMissingFields',
      '--fullUpload',
      '--skipFullUploadCheck',
      '--files',
      ...flags.dataFiles,
    ]);
    // await this.newStep('Search page generation', Atomic, [args.name]);
  }

  @Trackable()
  public async catch(err?: Error & {exitCode?: number}) {
    // TODO: CDX-1008: temporary fix until we actually ensure that oclif prints all errors (not only instanceof Error objects)
    if (err && !(err instanceof Error)) {
      const logger = typeof err === 'string' ? CliUx.ux.error : console.error;
      logger('Recipe step failed');
      logger(err);
    }
    throw err;
  }

  public async finally(_?: Error) {
    try {
      this.cleanTempFolder();
      super.finally(_);
    } catch (error) {
      // noop
    }
  }

  private storeParametrizedSnapshotLocally(
    objectType: string,
    catalogId: string
  ) {
    const objectTypeReplacementRegex = new RegExp('{{objecttype}}', 'gm');
    const catalogIdReplacementRegex = new RegExp('{{catalogId}}', 'gm');
    const snapshot = JSON.stringify(SnapshotTemplate)
      .replace(objectTypeReplacementRegex, objectType)
      .replace(catalogIdReplacementRegex, catalogId);
    const snapshotPath = join(
      CommerceRecipe.tempFolder,
      Project.resourceFolderName,
      'ALL.json' // The name of the snapshot file does not matter
    );

    writeJsonSync(snapshotPath, JSON.parse(snapshot), {spaces: 2});
  }

  /**
   * Creating ML model manually since not possible with snapshot.
   * The DNE ML model configuration contains a parameter (documentGroupId) that is autogenerated by the platform and unique to the org.
   * Therefore, it is not possible to guess that value
   */
  private async createMlModel(fieldNames: string[]) {
    // ec_category
    const enableDNE = await CliUx.ux.confirm(
      'Create a Navigation Experience (DNE) Model (https://docs.coveo.com/en/3396)? (y/n)'
    );
    if (!enableDNE) {
      return;
    }
    const field = await selectField(
      'Select the facet on which autoselect should apply',
      fieldNames
    );

    const authenticatedClient = new AuthenticatedClient();
    const platformClient = await authenticatedClient.getClient();
    newTask('Creating DNE ML model');
    const {modelId} = await platformClient.ml.dneConfig.createWithQuery({
      modelDisplayName: 'DNE',
      documentExtractionQuery: `(@${field})`,
      fieldsToAutoSelect: [`${field}`],
      intervalUnit: IntervalUnit.WEEK,
      exportPeriod: 'P3M',
    });
    if (!modelId) {
      CliUx.ux.warn('No modelId found');
      return;
    }

    newTask('Associate DNE ML model to pipeline');
    const {organization} = authenticatedClient.cfg.get();
    const pipelines = await platformClient.pipeline.list({
      organizationId: organization,
    });
    const searchPipeline = pipelines.find((p) => p.name === 'Search');
    if (!searchPipeline?.id) {
      CliUx.ux.warn('No Search pipelines found');
      return;
    }

    await platformClient.pipeline.associations.associate(searchPipeline.id, {
      rankingModifier: 75,
      modelId: modelId,
      customQueryParameters: {
        facetOrdering: {isEnabled: true},
        facetValueOrdering: {isEnabled: true},
        facetAutoSelect: {isEnabled: false},
        rankingBoost: {isEnabled: true},
      },
    });
    stopCurrentTask();
  }

  /**
   * TODO: Find a way to prevent duplication of this part which is already being done in the catalog creation piece
   * This costs another document parse
   */
  private async getFieldNames() {
    const {flags} = await this.parse(CommerceRecipe);
    const authenticatedClient = new AuthenticatedClient();
    const platformClient = await authenticatedClient.getClient();
    const {fields} = await getDocumentFieldsAndObjectTypeValues(
      platformClient,
      flags.dataFiles
    );
    return fields.map((field) => `${field.name}`);
  }

  private async additionalCommerceFeatures(fieldNames: string[]) {
    this.logHeader('Additional Commerce Features');
    await this.setupProductGrouping(fieldNames);
    await this.createMlModel(fieldNames);
  }

  private async setupProductGrouping(fieldNames: string[]) {
    const enableProductGrouping = await CliUx.ux.confirm(
      'Enable Product Grouping (https://docs.coveo.com/en/l78i2152)? (y/n)'
    );
    if (!enableProductGrouping) {
      return;
    }
    await selectField('Select your grouping field', fieldNames);

    // TODO: Validate
    // * Must be of type String.
    // * Must be set as Facet. If not facet, update field

    // This is just all for show. It assumes the user answered yes.
    // TODO: handle case when user does not want to enable product grouping
  }

  private ensureTempFolder() {
    ensureDirSync(join(CommerceRecipe.tempFolder, Project.resourceFolderName));
  }

  private cleanTempFolder() {
    rmSync(CommerceRecipe.tempFolder, {force: true, recursive: true});
  }

  private logHeader(name: string) {
    CliUx.ux.log('');
    CliUx.ux.styledHeader(name);
  }

  private async newStep<T extends typeof Command>(
    name: string,
    command: T,
    argv?: string[]
  ): CommandRunReturn<T> {
    this.logHeader(name);
    return command.run(argv);
  }
}
